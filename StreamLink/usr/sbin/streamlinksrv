#!/usr/bin/python2.7
# version: 1.4.0 mod j00zek 2020
# changes:
# - connection with e2settings
# - proceeding url parameters according to html standard

""" Streamlink Daemon """

__version__ = "1.4.0"

import os
os.environ["XDG_CONFIG_HOME"] = "/etc"

os.system('if [ `ps -ef|grep -v grep|grep -c ffmpeg` -eq 0 ];then rm -f /tmp/ffmpeg-*;fi')

import sys
import time
import atexit
import traceback
import platform
import shutil
import socket
import errno
import logging
import re
import signal
import warnings
from platform import node as hostname
from six import itervalues, iteritems
from six import PY2

if PY2:
    from urllib import unquote
    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
    from SocketServer import ForkingMixIn
else:
    from urllib.parse import unquote
    from http.server import HTTPServer, BaseHTTPRequestHandler
    from socketserver import ThreadingMixIn as ForkingMixIn

    
from websocket import __version__ as websocket_version
from requests import __version__ as requests_version

try:
    from socks import __version__ as socks_version
except ImportError:
    socks_version = "N/A"

from streamlink import Streamlink
from streamlink import plugins
from streamlink.stream.ffmpegmux import MuxedStream
from streamlink import (StreamlinkError, PluginError, NoStreamsError, NoPluginError, StreamError)
from streamlink.exceptions import FatalPluginError
from streamlink import __version__ as streamlink_version
from streamlink import __version_date__ as streamlink_version_date #wymaga dodania w __init__.py linia 14: __version_date__ = get_versions()['date']
import streamlink.logger as logger
from streamlink.plugin import api
from streamlink.cache import Cache
try:
    from streamlink import opts_parser
    from streamlink.opts_parser import *
    from streamlink.opts_parser import __version__ as opts_parser_version
except ImportError:
    opts_parser_version = "N/A"

try:
    from youtube_dl.version import __version__ as ytdl_version
except ImportError:
    ytdl_version = "N/A"

#config stored in E2 settings file
import urllib2, base64 #for remoteE2

from streamlink.e2config import getE2config

PORT_NUMBER = getE2config('PortNumber', 8088) # change it to 88 for livestreamersrv compatibility
_loglevel = LOGLEVEL = getE2config('logLevel', "info") # "critical", "error", "warning", "info", "debug", "trace" or "none"
#logging module Levels Numeric value
#           CRITICAL        50
#           ERROR           40
#           WARNING         30
#           INFO            20
#           DEBUG           10
#           NOTSET          0
if getE2config('logToFile', False) :
    if getE2config('ClearLogFile', True):
        for logPath in ('/home/root','/tmp','/hdd'):
          if os.path.exists(logPath + '/streamlinksrv.log'):
              os.system('rm -f /%s/streamlinksrv.log' % logPath)
    logging.basicConfig(filename= getE2config('logPath', '/tmp') + '/streamlinksrv.log',
                            filemode='a',
                            format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                            datefmt='%H:%M:%S',
                            level=logging.NOTSET)
else:
    for logPath in ('/home/root','/tmp','/hdd'):
      if os.path.exists(logPath + '/streamlinksrv.log'):
          os.system('rm -f /%s/streamlinksrv.log' % logPath)
    
# do not change
LOGGER = logging.getLogger('streamlink.streamlinksrv')
STREAM_SYNONYMS = ["best", "worst", "best-unfiltered", "worst-unfiltered"]
parser = None
PLUGIN_ARGS = False



#
# setup options
#
def setOptions(streamlink):
    """
    As of version 1.0.5, it's possible to save the options or plug-in-specific options in configuration files: https://streamlink.github.io/cli.html#configuration-file

    You can also append these options to URL.
    Example for commandline streamlink client:
        streamlink https://pilot.wp.pl/api/v1/channel/158 720,best --hls-segment-threads=3
        
    Example HTTP URL:
        http://127.0.0.1:8088/https://pilot.wp.pl/api/v1/channel/11;SLARGS;quality=720,best;--hls-segment-threads=3

    To test streamlinksrv from commandline:
        curl "http://127.0.0.1:8088/https://pilot.wp.pl/api/v1/channel/11;SLARGS;quality=720,best;--hls-segment-threads=3" -o /dev/null
    
    Not all options are available, just many of the possible ones:
    Some General, Player & Stream Options, most HTTP and Stream Transport Options and the Plugin Specific Options

    If missing options are needed, then you can specify them here.

    Note: The options set here have the lowest priority.
    """
    
    #streamlink.set_option("hds-live-edge", args.hds_live_edge)                                 # The time live HDS streams will start from the edge of stream. Default is 10.0
    #streamlink.set_option("hds-segment-attempts", 3)                   # How many attempts should be done to download each HDS segment before giving up. Default is 3
    #streamlink.set_option("hds-segment-threads", args.hds_segment_threads)                     # The size of the thread pool used to download HDS segments. Values 1-10. Default is 1
    #streamlink.set_option("hds-segment-timeout", args.hds_segment_timeout) #
    #streamlink.set_option("hds-timeout", args.hds_timeout) #

    #streamlink.set_option("hls-live-edge", args.hls_live_edge) #
    #streamlink.set_option("hls-segment-stream-data", args.hls_segment_stream_data) #
    #streamlink.set_option("hls-segment-attempts", args.hls_segment_attempts) #
    #streamlink.set_option("hls-playlist-reload-attempts", 3) #
    streamlink.set_option("hls-segment-threads", 9)                                            # The size of the thread pool used to download HLS segments. Values 1-10. Default is 1
    #streamlink.set_option("hls-segment-timeout", args.hls_segment_timeout) #
    #streamlink.set_option("hls-segment-ignore-names", args.hls_segment_ignore_names) #
    #streamlink.set_option("hls-segment-key-uri", args.hls_segment_key_uri) #
    #streamlink.set_option("hls-timeout", args.hls_timeout) #
    #streamlink.set_option("hls-audio-select", args.hls_audio_select) #
    #streamlink.set_option("hls-start-offset", args.hls_start_offset) #
    #streamlink.set_option("hls-duration", args.hls_duration) #
    #streamlink.set_option("hls-live-restart", args.hls_live_restart) #


    #streamlink.set_option("http-ssl-verify", "/etc/ssl/certs/ca-certificates.crt") #
    #streamlink.set_option("http-stream-timeout", args.http_stream_timeout) #

    #streamlink.set_option("ringbuffer-size", args.ringbuffer_size) #

    #streamlink.set_option("rtmp-proxy", args.rtmp_proxy) #
    #streamlink.set_option("rtmp-rtmpdump", args.rtmp_rtmpdump) #
    #streamlink.set_option("rtmp-timeout", args.rtmp_timeout) #

    #streamlink.set_option("stream-segment-attempts", args.stream_segment_attempts) #
    #streamlink.set_option("stream-segment-threads", args.stream_segment_threads) #
    #streamlink.set_option("stream-segment-timeout", args.stream_segment_timeout) #
    #streamlink.set_option("stream-timeout", args.stream_timeout) #

    #streamlink.set_option("ffmpeg-ffmpeg", args.ffmpeg_ffmpeg) #
    #streamlink.set_option("ffmpeg-verbose", args.ffmpeg_verbose) #
    #streamlink.set_option("ffmpeg-verbose-path", args.ffmpeg_verbose_path) #
    #streamlink.set_option("ffmpeg-video-transcode", args.ffmpeg_video_transcode) #
    #streamlink.set_option("ffmpeg-audio-transcode", args.ffmpeg_audio_transcode) #
    
    # The maximum size of ringbuffer. Add a M or K suffix to specify mega or kilo bytes instead of bytes.
    # The ringbuffer is used as a temporary storage between the stream and the player.
    # This is to allows us to download the stream faster than the player wants to read it. Default is "16M"
    #streamlink.set_option("ringbuffer-size", "32M")
    
    #streamlink.set_option("subprocess-errorlog", args.subprocess_errorlog) #
    #streamlink.set_option("subprocess-errorlog-path", args.subprocess_errorlog_path) #
    #streamlink.set_option("locale", args.locale) #

remoteE2standbyCMD = None

def remoteE2( url = '' ):
    global remoteE2standbyCMD
    if url.startswith('remoteE2/'):
        remoteE2standbyCMD = None
        retURL = ''
        remoteE2address  = getE2config('remoteE2address' , '192.168.1.8')
        remoteE2port     = getE2config('remoteE2port'    , '8001')
        remoteE2username = getE2config('remoteE2username', 'root')
        remoteE2password = getE2config('remoteE2password', 'root')
        remoteE2zap      = getE2config('remoteE2zap'     , True)
        remoteE2wakeup   = getE2config('remoteE2wakeup' , True)
        base64string = base64.b64encode('%s:%s' % (remoteE2username, remoteE2password))
        if remoteE2wakeup == True:
            #sprawdzenie stanu e2
            try:
                request = urllib2.Request('http://%s/web/powerstate'% remoteE2address)
                LOGGER.debug("request : {}", str(request))
                request.add_header("Authorization", "Basic %s" % base64string)   
                response = urllib2.urlopen(request).read()
                LOGGER.debug("response : {}", str(response))
            except Exception as e:
                LOGGER.error("Exception : {}", str(e))
                return '/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/offline.mp4'
            #pobudka e2
            if '<e2instandby>' in str(response) and 'true' in str(response):
                try:
                    request = urllib2.Request('http://%s/web/powerstate?newstate=4'% remoteE2address)
                    LOGGER.info("request wakeup: {}", str(request))
                    request.add_header("Authorization", "Basic %s" % base64string)   
                    response = urllib2.urlopen(request).read()
                    LOGGER.debug("response : {}", str(response))
                    #prepare standby script
                    remoteE2standbyCMD = urllib2.Request('http://%s/web/powerstate?newstate=5'% remoteE2address)
                    remoteE2standbyCMD.add_header("Authorization", "Basic %s" % base64string)
                    LOGGER.debug("response : {}", str(response))
                except Exception as e:
                    LOGGER.error("Exception : {}", str(e))
                    return '/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/offline.mp4'
            else:
                LOGGER.info("tuner running: {}")
        #generate URL e.g. http://192.168.1.8:8001/1:0:1:3DD0:640:13E:820000:0:0:0
        url = url[9:].replace('-',':')
        if remoteE2zap == True:
            try:
                request = urllib2.Request('http://%s/web/zap?sRef=%s'% (remoteE2address, url))
                LOGGER.info("request zap to: {}", str(request))
                request.add_header("Authorization", "Basic %s" % base64string)   
                response = urllib2.urlopen(request).read()
                LOGGER.debug("response : {}", str(response))
            except Exception as e:
                LOGGER.error("Exception : {}", str(e))
                return '/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/offline.mp4'
        time.sleep(1)
        return 'http://%s:%s/%s' % ( remoteE2address , remoteE2port , url )
    elif not remoteE2standbyCMD is None:
        LOGGER.info("request standby:")
        try:
            response = urllib2.urlopen(remoteE2standbyCMD).read()
            LOGGER.debug("response : {}", str(response))
        except Exception as e:
            LOGGER.error("Exception : {}", str(e))
    else:
        LOGGER.info("Unknown option or something wrong (url = '%s', remoteE2standbyCMD = '%s'" % (url , str(remoteE2standbyCMD)))
    return
    
def resolve_stream_name(streams, stream_name):
    if stream_name in STREAM_SYNONYMS and stream_name in streams:
        for name, stream in iteritems(streams):
            if stream is streams[stream_name] and name not in STREAM_SYNONYMS:
                return name

    return stream_name

def format_valid_streams(plugin, streams):
    delimiter = ", "
    validstreams = []

    for name, stream in sorted(streams.items(), key=lambda stream: plugin.stream_weight(stream[0])):
        if name in STREAM_SYNONYMS:
            continue

        def synonymfilter(n):
            return stream is streams[n] and n is not name

        synonyms = list(filter(synonymfilter, streams.keys()))

        if len(synonyms) > 0:
            joined = delimiter.join(synonyms)
            name = "{0} ({1})".format(name, joined)

        validstreams.append(name)

    return delimiter.join(validstreams)

def fetch_streams(plugin, **kwargs):
    return plugin.streams(**kwargs)

def test_stream(plugin, args, stream):
    prebuffer = None
    retry_open = args.retry_open if opts_parser_version >= "0.2.4" else 1
    for i in range(retry_open):
        stream_fd = None
        try:
            stream_fd = stream.open()
            LOGGER.debug("Pre-buffering 8192 bytes")
            prebuffer = stream_fd.read(8192)
        except StreamError as err:
            LOGGER.error("Try {0}/{1}: Could not open stream {2} ({3})".format(i + 1, retry_open, stream, err))
            return stream_fd, prebuffer
        except IOError as err:
            stream_fd.close()
            LOGGER.error("Failed to read data from stream: {0}".format(err))
        else:
            break

    if not prebuffer:
        if stream_fd is not None:
            stream_fd.close()
        LOGGER.error("No data returned from stream")

    return stream_fd, prebuffer
    
def showPluginArgs(plugin):
    if _loglevel in ("debug", "trace"):
        plugin_args = []
        for parg in plugin.arguments:
            value = plugin.get_option(parg.dest)
            if value:
                plugin_args.append((parg, value))

        if plugin_args:
            LOGGER.debug("Plugin specific arguments:")
            for parg, value in plugin_args:
                LOGGER.debug(" {0}={1} ({2})".format(parg.argument_name(plugin.module),
                                                value if not parg.sensitive else ("*" * 8),
                                                parg.dest))

def sendHeaders(http, status=200, type="text/html"):
    http.send_response(status)
    http.send_header('Server', 'Enigma2 Streamlink')
    http.send_header('Content-type', type)
    http.end_headers()

def sendOfflineMP4(http, send_headers=True, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/offline.mp4"):
    if send_headers:
        sendHeaders(http)

    http.wfile.write(open(file2send, "r").read())
    http.wfile.close()

def Stream(streamlink, http, url, argstr, quality):
    global parser, _loglevel

    if url.startswith('remoteE2/'):
        url = remoteE2(url)
        
    fd = None
    not_stream_opened = True
    try:
        # setup default options
        setOptions(streamlink)

        # setup plugin, http & stream specific options
        args = plugin = None
        if parser:
            global PLUGIN_ARGS
            if not PLUGIN_ARGS:
                PLUGIN_ARGS = setup_plugin_args(streamlink)
            config_files, plugin = setup_config_files(streamlink, url)
            if config_files or argstr:
                arglist = argsplit(" {}".format(argstr[0])) if argstr else []
                LOGGER.debug("URL Args: {}", str(arglist))
                try:
                    args = setup_args(arglist, config_files=config_files, ignore_unknown=False)
                except Exception:
                    return sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/wrongURLargs.mp4")
                else:
                    _loglevel = args.loglevel
                    logger.root.setLevel(_loglevel)
                    setupHttpSession(streamlink, args)
                    setupTransportOpts(streamlink, args)

        if not plugin:
            plugin = streamlink.resolve_url(url)

        if parser and PLUGIN_ARGS and args:
            setup_plugin_options(streamlink, plugin, args)
            showPluginArgs(plugin)

        LOGGER.info("Found matching plugin {0} for URL {1}", plugin.module, url)
        if args and args.player_passthrough:
            streams = fetch_streams(plugin, stream_types=args.player_passthrough)
        elif args:
            streams = fetch_streams(plugin,
                stream_types=args.stream_types,
                sorting_excludes=args.stream_sorting_excludes)
        else:
            streams = fetch_streams(plugin)

        if any((not streams, not args)):
            LOGGER.error("No playable streams found on this URL: {0}".format(url))
            return sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/noStreamsFound.mp4")

        LOGGER.info("Available streams:\n{0}", format_valid_streams(plugin, streams))
        stream = None
        for stream_name in (resolve_stream_name(streams, s.strip()) for s in quality.split(',')):
            if stream_name in streams:
                stream = True
                break
        
        if not stream:
            stream_name = "best"
            LOGGER.info("The specified stream(s) '{0}' could not be found, using '{1}' stream", quality, stream_name)

        if not stream_name.endswith("_alt") and stream_name not in STREAM_SYNONYMS:
            def _name_contains_alt(k):
                return k.startswith(stream_name) and "_alt" in k

            alt_streams = list(filter(lambda k: _name_contains_alt(k),
                                        sorted(streams.keys())))
        else:
            alt_streams = []

        stream_names = [stream_name] + alt_streams
        for stream_name in stream_names:
            stream = streams[stream_name]
            stream_type = type(stream).shortname()
            LOGGER.info("Opening stream: {0} ({1})".format(stream_name, stream_type))
            if stream_type in args.player_passthrough:
                LOGGER.info('301 Passthrough - URL: {0}'.format(stream.url))
                http.send_response(301)
                http.send_header('Location', stream.url)
                return http.end_headers()

            fd, prebuffer = test_stream(plugin, args, stream)
            if prebuffer:
                break

        if not prebuffer:
            raise StreamError("Could not open stream {0}, tried {1} times, exiting", stream, args.retry_open)

        LOGGER.debug("Writing stream to player")
        not_stream_opened = False
        sendHeaders(http)
        http.wfile.write(prebuffer)
        shutil.copyfileobj(fd, http.wfile)
    except NoPluginError:
        LOGGER.error("No plugin can handle URL: {0}", url)
        sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/noPluginFound.mp4")
    except PluginError as err:
        LOGGER.error("Plugin error: {0}", err)
        sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/PluginError.mp4")
    except FatalPluginError as err:
        LOGGER.error("Fatal Plugin error: {0}", err)
        sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/PluginFatalError.mp4")
    except StreamError as err:
        LOGGER.error("Stream Error: {0}", err)
        sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/noStreamsFound.mp4")
    except NoStreamsError as err:
        LOGGER.error("No Streams Error: {0}", err)
        sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/noStreamsFound.mp4")
    except socket.error as err:
        if err.errno != errno.EPIPE:
            # Not a broken pipe
            raise
        else:
            # player disconnected
            LOGGER.info('Detected player disconnect')
    except Exception as err:
        if not_stream_opened and LOGLEVEL not in ("debug", "trace"):
            LOGGER.error("Got exception: {0}", err)
        else:
            LOGGER.error("Got exception: {0}\n{1}", err, traceback.format_exc().splitlines())

        if str(err) == 'wperror-403':
            sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/wperror-403.mp4")
        elif str(err) == 'wperror-422':
            sendOfflineMP4(http, send_headers=not_stream_opened, file2send="/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/streams/wperror-422.mp4")
        else:
            sendOfflineMP4(http, send_headers=not_stream_opened)
    finally:
        if fd:
            LOGGER.info("Stream ended")
            fd.close()
            LOGGER.info("Closing currently open stream...")
            remoteE2() #to put in standby
            os.system('if [ `ps -ef|grep -v grep|grep -c ffmpeg` -eq 0 ];then rm -f /tmp/ffmpeg-*;fi;rm -f /tmp/*.streamlink.') #troche porzadku bo smietnik zostaje

class Streamlink2(Streamlink):
    _loaded_plugins = None

    def load_builtin_plugins(self):
        if self.__class__._loaded_plugins is not None:
            self._update_loaded_plugins()
        else:
            self.load_plugins(plugins.__path__[0])
            self.__class__._loaded_plugins = self.plugins.copy()

    def _update_loaded_plugins(self):
        self.plugins = self.__class__._loaded_plugins.copy()
        for plugin in itervalues(self.plugins):
            plugin.session = self

class StreamHandler(BaseHTTPRequestHandler):

    def do_HEAD(s):
        sendHeaders(s)

    def do_GET(s):
        os.system('if [ `ps -ef|grep -v grep|grep -c ffmpeg` -eq 0 ];then rm -f /tmp/ffmpeg-*;fi;rm -f /tmp/*.streamlink.')
        url=unquote(s.path[1:])
        quality="best"

        LOGGER.debug("Received URL: {}", url)
        #split args
        url = url.split(';SLARGS;', 1)
        if len(url) > 1:
            url[1] = url[1].replace(';',' ')
            if 'quality=' in url[1]:
                for arg in url[1].split(' '):
                    if arg.startswith('quality='):
                        quality = arg[8:]
                        LOGGER.debug("quality params: {}", quality)
                        url[1] = url[1].replace('quality=%s' % quality,'').strip()
                        break
        LOGGER.info("Processing URL: {}", url[0].strip())
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            streamlink = Streamlink2()
        return Stream(streamlink, s, url[0].strip(), url[1:2], quality) #ciekawa konstrukcja, zwrca url[1] jesli istnieje lub [] jesli nie

    def finish(self, *args, **kw):
        try:
            if not self.wfile.closed:
                self.wfile.flush()
                self.wfile.close()
        except socket.error:
            pass
        self.rfile.close()

    def handle(self):
        try:
            BaseHTTPRequestHandler.handle(self)
        except socket.error:
            pass

    if LOGLEVEL not in ("debug", "trace"):
        def log_message(self, format, *args):
            return

class ThreadedHTTPServer(ForkingMixIn, HTTPServer):
    """Handle requests in a separate thread."""

def start():
    def setup_logging(stream=sys.stdout, level="info"):
        fmt = ("[{asctime},{msecs:0.0f}]" if level == "trace" else "") + "[{name}][{levelname}] {message}"
        logger.basicConfig(stream=stream, level=level, format=fmt, style="{", datefmt="%H:%M:%S")

    global LOGGER, parser
    setup_logging(level=LOGLEVEL)
    if opts_parser_version != "N/A":
        try:
            opts_parser.LOGGER = LOGGER
            opts_parser.DEFAULT_LEVEL = LOGLEVEL
            parser = build_parser()
        except Exception as err:
            LOGGER.error("err: {}", str(err))

    httpd = ThreadedHTTPServer(("", PORT_NUMBER), StreamHandler)
    try:
        sys.path.append('/usr/lib/enigma2/python/Plugins/Extensions/StreamlinkConfig/')
        from version import Version as jVersion
    except Exception as e:
        jVersion = str(e)
    LOGGER.info("###################################################")
    LOGGER.info("{0} Server ({1} - {2}) started", time.asctime(), __version__, jVersion)
    LOGGER.info("Host:          {0}", hostname())
    LOGGER.info("Port:          {0}", PORT_NUMBER)
    LOGGER.info("OS:            {0}", platform.platform())
    LOGGER.info("Python:        {0}".format(platform.python_version()))
    LOGGER.info("Streamlink:    {0} / {1}".format(streamlink_version, streamlink_version_date))
    LOGGER.info("Log level:     {0}", _loglevel)
    LOGGER.debug("Options Parser: {0}".format(opts_parser_version))
    LOGGER.debug("youtube-dl:     {0}".format(ytdl_version))
    LOGGER.info("Requests({0}), Socks({1}), Websocket({2})".format(requests_version, socks_version, websocket_version))
    LOGGER.info("###################################################")
    

    streamlink = Streamlink2()
    del streamlink

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass
    httpd.server_close()
    LOGGER.info("{0} Server stopped - Host: {1}, Port: {2}", time.asctime(), hostname(), PORT_NUMBER)


class Daemon:
    """
    A generic daemon class.

    Usage: subclass the Daemon class and override the run() method
    """
    def __init__(self, pidfile, stdin="/dev/null", stdout="/dev/null", stderr="/dev/null"):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile

    def daemonize(self):
        """
        do the UNIX double-fork magic, see Stevens' "Advanced
        Programming in the UNIX Environment" for details (ISBN 0201563177)
        http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
        """
        try:
            pid = os.fork()
            if pid > 0:
                #sys.stderr.write('Missing pid file for already running streamlinksrv?')
                # exit first parent
                sys.exit(0)
        except OSError as e:
            sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

        # decouple from parent environment
        os.chdir("/")
        os.setsid()
        os.umask(0)

        # do second fork
        try:
            pid = os.fork()
            if pid > 0:
                # exit from second parent
                sys.exit(0)
        except OSError as e:
            sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

        sys.stdout.write('streamlink started correctly, logging level: %s\n' % LOGLEVEL)
        # redirect standard file descriptors
        sys.stdout.flush()
        sys.stderr.flush()
        si = open(self.stdin, "r")
        so = open(self.stdout, "a+")
        se = open(self.stderr, "a+")
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())

        # write pidfile
        atexit.register(self.delpid)
        pid = str(os.getpid())
        open(self.pidfile,"w+").write("%s\n" % pid)

    def delpid(self):
        os.remove(self.pidfile)

    def start(self):
        """
        Start the daemon
        """
        # Check for a pidfile to see if the daemon already runs
        try:
            pf = open(self.pidfile,"r")
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)

        # Start the daemon
        self.daemonize()
        self.run()

    def stop(self):
        """
        Stop the daemon
        """
        # Get the pid from the pidfile
        try:
            pf = open(self.pidfile,"r")
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            sys.stderr.write(message % self.pidfile)
            return # not an error in a restart

        # Try killing the daemon process
        try:
            while 1:
                os.kill(pid, signal.SIGTERM)
                time.sleep(0.1)
        except OSError as err:
            err = str(err)
            if err.find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                print(str(err))
                sys.exit(1)
        if os.path.exists(self.pidfile):
            os.remove(self.pidfile)

    def restart(self):
        """
        Restart the daemon
        """
        self.stop()
        self.start()

    def run(self):
        """
        You should override this method when you subclass Daemon. It will be called after the process has been
        daemonized by start() or restart().
        """


class StreamlinkDaemon(Daemon):
    def run(self):
        start()


if __name__ == "__main__":
    daemon = StreamlinkDaemon("/var/run/streamlink.pid")
    if len(sys.argv) >= 2:
        if "start" == sys.argv[1]:
            daemon.start()
        elif "stop" == sys.argv[1]:
            daemon.stop()
        elif "restart" == sys.argv[1]:
            daemon.restart()
        elif "manualstart" == sys.argv[1]:
            daemon.stop()
            if len(sys.argv) > 2 and sys.argv[2] in ("debug", "trace"):
                _loglevel = LOGLEVEL = sys.argv[2]
            start()
        else:
            print("Unknown command")
            sys.exit(2)
        sys.exit(0)
    else:
        print("usage: %s start|stop|restart|manualstart" % sys.argv[0])
        print("          manualstart include a stop")
        sys.exit(2)
